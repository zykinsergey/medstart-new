@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

$small-breakpoint:  767px  !default;
$medium-breakpoint: 960px !default;
$large-breakpoint:  1200px !default;
$xlarge-breakpoint: 1920px !default;

// Here we define the lower and upper bounds for each media size
$small-range:   (0, $small-breakpoint) !default; /* 0, 767px */
$medium-range:  ($small-breakpoint  + 1, $medium-breakpoint) !default; /* 768px, 960px */
$large-range:   ($medium-breakpoint + 1, $large-breakpoint)  !default; /* 961px, 1200px */
$xlarge-range:  ($large-breakpoint  + 1, $xlarge-breakpoint) !default; /* 1201px, 1920px */
$xxlarge-range: ($xlarge-breakpoint + 1, 99999999) !default; /* 1921px, ... */

// Media Queries
$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$retina: (
        "#{$screen} and (-webkit-min-device-pixel-ratio: 2)",
        "#{$screen} and (min--moz-device-pixel-ratio: 2)",
        "#{$screen} and (-o-min-device-pixel-ratio: 2/1)",
        "#{$screen} and (min-device-pixel-ratio: 2)",
        "#{$screen} and (min-resolution: 192dpi)",
        "#{$screen} and (min-resolution: 2dppx)"
);

@mixin breakpoint($point) {
  @if $point == small {
    @media #{$small-only} { @content; }
  }
  @else if $point == small-up {
    @media #{$small-up} { @content; }
  }
  @else if $point == medium {
    @media #{$medium-only} { @content; }
  }
  @else if $point == medium-up {
    @media #{$medium-up} { @content; }
  }
  @else if $point == large {
    @media #{$large-only} { @content; }
  }
  @else if $point == large-up {
    @media #{$large-up} { @content; }
  }
  @else if $point == xlarge {
    @media #{$xlarge-only} { @content; }
  }
  @else if $point == xlarge-up {
    @media #{$xlarge-up} { @content; }
  }
  @else if $point == xxlarge {
    @media #{$xxlarge-only} { @content; }
  }
  @else if $point == xxlarge-up {
    @media #{$xxlarge-up} { @content; }
  }
  @else {
    @warn "This breakpoint '#{$point}' doesn't exist!";
  }
}






$small: 991px;
$large: 1200px;

@mixin respond-to($media) {
  @if $media == handhelds {
    @media (max-width: $small) { @content; }
  }
  @else if $media == medi {
    @media (min-width: $small + 1) and (max-width: $large - 1) { @content; }
  }
  @else if $media == wide {
    @media (min-width: $large) { @content; }
  }
  @else if $media == small-device-width {
    @media (max-width: $large) { @content; }
  }
}

// example of use
//.wr {
//  min-width: 980px; width: 100%; position: relative;
//  max-width: 2560px;
//
//  overflow: hidden; z-index: 99; margin: 0 auto;
//  background-repeat: no-repeat;
//  background-position: top center;
//  background-color: white;
//
//  .block {
//    position: relative;
//    width: 980px;
//    margin: 0 auto;
//
//    @include respond-to(handhelds) { width: 100% ;}
//    @include respond-to(medium-screens) { width: 125px; }
//    @include respond-to(wide-screens) { width: 1600px; }
//  }
//
//  @include respond-to(handhelds) { width: 100% ;}
//  @include respond-to(medium-screens) { width: 125px; }
//  @include respond-to(wide-screens) { width: 1600px; }
//}










// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16;

@function em($pixels, $context: $baseline-px) {
  @return #{$pixels/$context}em;
}

@function rem($pixels, $context: $baseline-px) {
  @return #{$pixels/$context}rem;
}

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } }
// Usage:
// .element {
//   +rem('padding',10px 0 2px 5px);
// }
